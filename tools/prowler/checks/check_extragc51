#!/usr/bin/env bash
# Prowler - the handy cloud security tool (copyright 2019) by Toni de la Fuente
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

# Remediation:
#
#   here URL to the relevand/official documentation
#
#   here commands or steps to fix it if avalable, like: 
#   aws logs put-metric-filter \
#     --region us-east-1 \
#     --log-group-name CloudTrail/MyCloudTrailLG \
#     --filter-name AWSCloudTrailChanges \
#     --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }' \
#     --metric-transformations metricName=CloudTrailEventCount,metricNamespace=CloudTrailMetrics,metricValue=1
#
# Government of Canada Cloud Guardrails Extensions
# Eric Maia and Scott Levac Treasury Board of Canada Secretariat
# December 2019

CHECK_ID_extragc51="5.1"
CHECK_TITLE_extragc51="[checkGC51] All users with console access have MFA enabled (Not Scored) (part of GC Guardrails)"
CHECK_SCORED_extragc51="NOT_SCORED"
CHECK_TYPE_extragc51="EXTRA"
CHECK_ALTERNATE_extragc51="extragc51"




extragc51(){


GC_SEC_ALL_USERS=$($AWSCLI iam list-users $PROFILE_OPT --region $REGION --output text --query 'Users[*].UserName')
 
    if [[ $GC_SEC_ALL_USERS ]];then
      

      for gcusers in $GC_SEC_ALL_USERS;do

        COMMANDGC51=$($AWSCLI iam list-mfa-devices --user-name $gcusers $PROFILE_OPT --region $REGION --output text --query 'MFADevices')
        
         if [[ "$COMMANDGC51" ]]; then
              textPass "User: $gcusers has MFA enabled"
         else
           # is programic only access only required?
           # 2> /dev/null is appended to the end to capture the error retruned when no login profile exists
           GC_SEC_LOGIN_PROFILE=$($AWSCLI iam get-login-profile --user-name $gcusers $PROFILE_OPT --region $REGION --output text --query 'LoginProfile.UserName' 2> /dev/null)
           if [[ $GC_SEC_LOGIN_PROFILE == $gcusers ]]; then
              # has no MFA, but has console access
              textFail "User: $gcusers has no MFA enabled and has console access"
           else
              # has no MFA, but has no console access
              textPass "User: $gcusers has no MFA enabled, but has programatic access only"
           fi
         fi


      done  
      
    else
      textFail "No users can be found"
    fi
   
}
